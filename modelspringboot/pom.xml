<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>modelspring</artifactId>
        <groupId>com.lbin</groupId>
        <version>v1</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>modelspringboot</artifactId>
    <name>Boot</name>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--通用-->
        <dependency>
            <groupId>com.lbin</groupId>
            <artifactId>model</artifactId>
            <version>v1</version>
        </dependency>
        <!--自定义-->
        <dependency>
            <groupId>com.lbin</groupId>
            <artifactId>custom</artifactId>
            <version>v1</version>
        </dependency>

        <dependency>
            <groupId>com.lbin</groupId>
            <artifactId>swagger</artifactId>
            <version>v1</version>
        </dependency>

        <dependency>
            <groupId>com.lbin</groupId>
            <artifactId>devtools</artifactId>
            <version>v1</version>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>

            <plugin>
                <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                    <source>1.8</source> <!-- 源代码使用的JDK版本 -->
                    <target>1.8</target> <!-- 需要生成的目标class文件的编译版本 -->
                    <encoding>UTF-8</encoding><!-- 字符集编码 -->
                    <verbose>true</verbose>
                    <showWarnings>true</showWarnings>
                    <fork>true</fork><!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->
                    <executable><!-- path-to-javac --></executable><!-- 使用指定的javac命令，例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->
                    <compilerVersion>1.3</compilerVersion><!-- 指定插件将使用的编译器的版本 -->
                    <meminitial>128m</meminitial><!-- 编译器使用的初始内存 -->
                    <maxmem>512m</maxmem><!-- 编译器使用的最大内存 -->
                    <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>&lt;!&ndash; 这个选项用来传递编译器自身不包含但是却支持的参数选项 &ndash;&gt;-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.3.0.RELEASE</version>
                <configuration>
                    <!--<mainClass>com.lbin.BootApplication</mainClass>-->
                    <mainClass>com.lbin.BootApplication</mainClass>
                    <!--<layout>ZIP</layout>-->
                   <!-- layout属性的值可以如下：

                    JAR，即通常的可执行jar
                    Main-Class: org.springframework.boot.loader.JarLauncher

                    WAR，即通常的可执行war，需要的servlet容器依赖位于WEB-INF/lib-provided
                    Main-Class: org.springframework.boot.loader.warLauncher

                    ZIP，即DIR，类似于JAR
                    Main-Class: org.springframework.boot.loader.PropertiesLauncher

                    MODULE，将所有的依赖库打包（scope为provided的除外），但是不打包Spring Boot的任何Launcher
                    NONE，将所有的依赖库打包，但是不打包Spring Boot的任何Launcher-->
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>